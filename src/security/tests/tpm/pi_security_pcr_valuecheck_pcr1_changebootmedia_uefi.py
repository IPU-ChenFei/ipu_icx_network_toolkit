#!/usr/bin/env python
##########################################################################
# INTEL CONFIDENTIAL
# Copyright Intel Corporation All Rights Reserved.
#
# The source code contained or described herein and all documents related to
# the source code ("Material") are owned by Intel Corporation or its suppliers
# or licensors. Title to the Material remains with Intel Corporation or its
# suppliers and licensors. The Material may contain trade secrets and
# proprietary and confidential information of Intel Corporation and its
# suppliers and licensors, and is protected by worldwide copyright and trade
# secret laws and treaty provisions. No part of the Material may be used,copied,
# reproduced, modified, published, uploaded, posted, transmitted, distributed,
# or disclosed in any way without Intel's prior express written permission.
#
# No license under any patent, copyright, trade secret or other intellectual
# property right is granted to or conferred upon you by disclosure or delivery
# of the Materials, either expressly, by implication, inducement, estoppel or
# otherwise. Any license under such intellectual property rights must be express
# and approved by Intel in writing.
##########################################################################

import sys
import time

from dtaf_core.lib.dtaf_constants import Framework
from dtaf_core.providers.provider_factory import ProviderFactory
from dtaf_core.providers.silicon_reg_provider import SiliconRegProvider

from src.lib.dtaf_content_constants import TimeConstants
from src.lib import content_exceptions
from src.lib.test_content_logger import TestContentLogger
from src.security.tests.cbnt_txt.txt_common import TxtBaseTest
from src.lib.bios_util import ItpXmlCli
from src.lib.bios_util import BootOptions
from dtaf_core.providers.silicon_debug_provider import SiliconDebugProvider
from dtaf_core.providers.physical_control import PhysicalControlProvider

class Tpm2PcrValueCheckPcr1ChangeBootMediaUefi(TxtBaseTest):
    """
    HPQLM ID : H79543-PI_Security_TPM2.0PCRvaluecheck_PCR1_chnagebootmedia_UEFI

    Verifies the PCR1 value will be changed between different Boot order changes.
    """
    PCR_VALUE = 'PCR 01'
    TEST_CASE_ID = ["H79543", "PI_Security_TPM2.0PCRvaluecheck_PCR1_chnagebootmedia_UEFI"]
    STEP_DATA_DICT = {1: {'step_details': 'Copies pcrdump64.zip to SUT and then to USB',
                          'expected_results': 'pcrdump64.zip copied successfully to SUT and then to USB'},
                      2: {'step_details': 'Set boot order to UEFI shell and execute pcrdump64.efi files ',
                          'expected_results': 'pcrdump64.efi command executed successfully'},
                      3: {'step_details': 'Set boot order to the connected SSD or other media device, '
                                          'boot back to uefi shell via screen parsing and execute pcrdump64.efi files',
                          'expected_results': 'pcrdump64.efi command executed successfully'},
                      4: {'step_details': 'Compare PCR 01 value will different due to change in boot media '
                                          'and boot back to OS',
                          'expected_results': 'PCR 01 is different due to change in boot media and SUT is in OS'}
                      }

    def __init__(self, test_log, arguments, cfg_opts):
        """
        Create instance of Tpm2PcrValueCheckPcr1ChangeBootMediaUefi.

        :param cfg_opts: Configuration Object of provider
        :param test_log: Log object
        :param arguments: None
        """
        super(Tpm2PcrValueCheckPcr1ChangeBootMediaUefi, self).__init__(test_log, arguments, cfg_opts)
        self._test_content_logger = TestContentLogger(test_log, self.TEST_CASE_ID, self.STEP_DATA_DICT)
        self.previous_boot_order = None
        self.current_boot_order = None
        self.itp_xml_cli_util = None
        si_dbg_cfg = cfg_opts.find(SiliconDebugProvider.DEFAULT_CONFIG_PATH)
        self._sdp = ProviderFactory.create(
            si_dbg_cfg, test_log)  # type: SiliconDebugProvider

    def prepare(self):
        # type: () -> None
        """
        Copy pcrdump64.zip to SUT and then to USB drive
        """
        super(Tpm2PcrValueCheckPcr1ChangeBootMediaUefi, self).prepare()
        # copying the zip .efi from host to usb
        self._test_content_logger.start_step_logger(1)
        self.copy_file(self._PCR_DUMP_64_ZIP_FILE)
        self._sdp.itp.unlock()
        #self._csp = ProviderFactory.create(self._csp_cfg, self._log)
        self.itp_xml_cli_util = ItpXmlCli(self._log, self._cfg)
        self.previous_boot_order = self.itp_xml_cli_util.get_current_boot_order_string()
        self._log.info("Previous boot order {}".format(self.previous_boot_order))
        self._test_content_logger.end_step_logger(1, return_val=True)

    def execute(self):
        """
        Compare PCR1 Dump values generated by pcrdump64 before and after changing the boot order to the connected device
        1. Set boot order to UEFI shell and execute pcrdump64.efi files to collect PCR information.
        2. Change the boot order to connected media device
        3. Boot back to UEFI shell and execute pcrdump64.efi files to collect PCR information
        4. Compare the pcr1 value between two different boot sequence order.

        :raise: Test fail exception if SUT does not boot to uefi shell or PCR value is found same.
        :return: True if TC pass
        """
        self._test_content_logger.start_step_logger(2)
        pcr_dump_folder = ''
        for pcr_folder_name, pcr_zip_folder in self._PCR_DUMP_64_ZIP_FILE.items():
            pcr_dump_folder = pcr_folder_name
        # get PCR value for current boot order sequence
        self._sdp.itp.unlock()
        self.itp_xml_cli_util.set_default_boot(BootOptions.UEFI)
        self._common_content_lib.perform_graceful_ac_off_on(self._ac_obj)
        self._log.info("Waiting for UEFI shell")
        self._uefi_obj.wait_for_uefi(self._bios_boot_menu_entry_wait_time)
        output_first_boot = self.get_pcrdump_from_uefi(
            pcr_dump_cmd=self._EXECUTE_PCRDUMP_64, pcr_dump_dir=pcr_dump_folder)
        self._log.debug("PCR dump via boot order change to UEFI is: {}".format(output_first_boot))
        pcr_values_first_boot = self.pcrdump64_data_formatting(output_first_boot)
        self._test_content_logger.end_step_logger(2, return_val=True)

        # get PCR value booting to UEFI via boot manager menu after changing the boot sequence
        self._test_content_logger.start_step_logger(3)
        self._sdp.itp.unlock()
        self.itp_xml_cli_util.set_default_boot(self._common_content_configuration.get_boot_media_device(), boot_flag=False)
        if not self._uefi_util_obj.enter_uefi_shell():
            raise content_exceptions.TestFail("SUT failed to boot to UEFI shell")
        output_second_boot = self.get_pcrdump_from_uefi(
            pcr_dump_cmd=self._EXECUTE_PCRDUMP_64, pcr_dump_dir=pcr_dump_folder)
        self._log.debug("PCR dump values via Boot manager to UEFI is: {}".format(output_second_boot))
        pcr_values_second_boot = self.pcrdump64_data_formatting(output_second_boot)
        self._test_content_logger.end_step_logger(3, return_val=True)

        self._test_content_logger.start_step_logger(4)
        if not self.compare_pcr_value(pcr_values_first_boot, pcr_values_second_boot, self.PCR_VALUE):
            raise content_exceptions.TestFail("Pcr value {} for first boot and second boot is same".format(
                self.PCR_VALUE))
        self._log.info("Pcr value {} for first and second boot is different as expected".format(self.PCR_VALUE))
        time.sleep(TimeConstants.ONE_MIN_IN_SEC)
        self._sdp.itp.unlock()
        self.itp_xml_cli_util.set_boot_order(self.previous_boot_order)
        self.perform_graceful_g3()
        self._test_content_logger.end_step_logger(4, return_val=True)

        return True

    def cleanup(self, return_status):  # type: (bool) -> None

        """
        Reverting to previous boot order if current boot order is not same as previous boot order
        """
        # checking if boot order is equal to previous boot order
        self._sdp.itp.unlock()
        current_boot_order = self.itp_xml_cli_util.get_current_boot_order_string()
        if str(current_boot_order) != str(self.previous_boot_order):
            self.itp_xml_cli_util.set_boot_order(self.previous_boot_order)
            self.perform_graceful_g3()
        super(Tpm2PcrValueCheckPcr1ChangeBootMediaUefi, self).cleanup(return_status)


if __name__ == "__main__":
    sys.exit(Framework.TEST_RESULT_PASS if Tpm2PcrValueCheckPcr1ChangeBootMediaUefi.main() else Framework.TEST_RESULT_FAIL)
