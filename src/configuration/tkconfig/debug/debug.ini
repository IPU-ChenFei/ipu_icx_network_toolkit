############################# Platform Debugging/Checking Configuration ##############################
# Support Line Feed
#   the config file support line feed with not top case.

# Trigger/Running Point
#   "test start" -> "boot to sutos" -> [pre_check] -> "test case steps" -> "test end" -> [post_check] -> [dump_check]
#                -> [monitor_check] -> ...
#   [inband_check] -> ...
#
# Option Naming Convention
#   1. option name startswith "record_" is used to record related logs
#   2. option name startswith "check_" is used to check information/errors from logs or other run-time tools
#   3. option name startswith "dump_" is used to check dump files
#
# Option Values
#  1. option name startswith "record_", then the value can be True/False
#  2. option name startswith "dump_", then the value can be True/False
#  2. option name startswith "check_", then the value should be format: (boolean, str)
#      PARAM 1: Enable/Disable this checker
#      PARAM 2: Checker Condition
#        OR(v1, v2,):   if matches one of the v1 or v2, then returns TRUE
#        AND(v1, v2,):  if matches v1 and v2 simultaneously, then returns TRUE
#        CAL(k, v):     if the number of k equals v, then returns TRUE
#        NUL():         special condition will be hardcoded in apis, no need user's input


[__options__]
# fixme: this section is only for reference, no any effects to case execution
### BIOS Log ###
check_bios_mcerr = (False, 'OR(Machine Check, [Mca]CheckMcBankErrorStatus returns TRUE, McBankErrorHandler, McaDetectAndHandle)')
check_bios_upi_link = (False, 'AND(CPU0 :LEP0(1:CPU1): LEP1(0: CPU1), CPU1 :LEP0(1:CPU0): LEP1(0: CPU0))')
check_bios_dimm_frq = (False, 'OR(running at DDR-2666, running at DDR-2933)')
check_bios_dimm_num = (False, 'CAL('DIMM:', 4)')


### BMC Redfish ###
# bmc related logs: sel/journal/sensor/healthy logs
record_bmc_debug_data = False
# get it from legacy cycling function
check_bmc_mcerr = (False, 'NUL()')


### Windows OS ###
# system hardware configuration list: cpu/memory/pcie/...
record_windows_system_cfg = False
record_windows_event_log = False
# wmic cpu get *
record_windows_cpuinfo = False
# used for [dpmo_check], firstly get a golden file in cycle 0, then compare it in next cycles
check_windows_system_cfg = (False, 'NUL()')


### Linux OS ###
record_linux_system_cfg = False
# dmesg
record_linux_dmesg = False
# /var/log/messages
record_linux_message = False
# lscpu, turbostat --Dump
record_linux_cpuinfo = False
# sensors, hddtemp
# pkg dependency: lm_sensors, lm_sensors-devel, hddtemp
record_linux_system_sensors = False
# pkg dependency: yum install acpica-tools
#   acpidump -o acpi_tb.out
#   acpixtract -a acpi_tb.out   # collect all *.dat
#   iasl -d mcfg.dat            # parse each *.dat will generate *.dsl
#   cat mcfg.dsl                # cat all *.dsl
# append all parsed contents to a single log file (if not very large, or split it to another file)
record_linux_acpi_tables = False
# /var/log/messages
check_linux_syslog_error = (False, 'OR(Hardware Error, warp)')
# used for [dpmo_check], firstly get a golden file in cycle 0, then compare it in next cycles
check_linux_system_cfg = (False, 'NUL()')
# check clock type is tsc/hpet/acpi_pm
# use command: cat /sys/devices/system/clocksource/clocksource0/current_clocksource
check_linux_clock_type = (False, 'OR(tsc,)')
# check if pcie device is show correctly
check_linux_special_pcie_device = (False, 'AND(devname=i210, speed=2.5 GT/s, width=x1)')


### Errors Need to Check after Reboot ###
# check if /var/log/mcelog is there, if so, add its path to summary table
# pkg dependency: yum install mcelog; systemctl enable mcelog; systemctl start mcelog
dump_linux_mcelog = False
# check if /var/crash is not empty, if so, add its path to summary table
# pkg dependency: yum install kexec-tools; systemctl enable kdump; systemctl start kdump
dump_linux_kernel = False


### System OOB: Work with External Auxiliary Device ###
record_demo_power_status = False
check_demo_power_equals_s0 = (False, 'NUL()')


[pre_check]
### run before the test steps ###
check_bios_mcerr = (False, 'OR(Machine Check, [Mca]CheckMcBankErrorStatus returns TRUE,
                   McBankErrorHandler, McaDetectAndHandle)')
check_bios_upi_link = (False, 'AND(CPU0 :LEP0(1:CPU1): LEP1(0: CPU1), CPU1 :LEP0(1:CPU0): LEP1(0: CPU0))')
check_bios_dimm_frq = (False, 'OR(running at DDR-2666, running at DDR-2933)')
check_bios_dimm_num = (False, 'CAL('DIMM:', 4)')

record_bmc_debug_data = False


[post_check]
### run when test steps end (complete or errors) ###
record_windows_system_cfg = False
record_windows_event_log = False
record_windows_cpuinfo = False

record_linux_system_cfg = False
record_linux_dmesg = False
record_linux_message = False
record_linux_cpuinfo = False
record_linux_system_sensors = False
record_linux_acpi_tables = False

check_linux_syslog_error = (False, 'OR(Hardware Error, warp)')

check_bmc_mcerr = (False, 'NUL()')


[monitor_check]
### run when test script initiates ###
# This section is thread driven running in host controller
#   1. thread will continually run until "test end" if option name startswith "record_"
#   2. thread will stop if option name startswith "check_", and check condition returns TRUE
#   3. thread action will be triggered each 3s
record_demo_power_status = False
check_demo_power_equals_s0 = False


[dump_check]
### run when test steps end (errors) ###
### must force system shutdown & recover ###
### only record sutos dump file path to summary table ###
dump_linux_mcelog = False
dump_linux_kernel = False


[inband_check]
### run when test script locates in sutos ###
# This section is thread driven running in sut target, it's a global standalone checker compared with [monitor_check]
# NO NEED to do anything if script runs in host end
#   1. a thread maps to an option
#   2. each thread runs forever
#   3. thread action will be triggered each 3s
#   4. all checks /records logs will be saved in related files, and logs need to be rotated to a new file if "Size >1M"
#   5. a single inband_check.py required for customer usage
#   6. a single inband_check.log will summarize the status into a readable table
check_linux_syslog_error = (False, 'OR(Hardware Error, warp)')
record_linux_system_sensors = False


[dpmo_check]
### this section only used for dpmo cycling
record_windows_system_cfg = False
record_windows_event_log = False
record_windows_cpuinfo = False
check_windows_system_cfg = (False, 'NUL()')

record_linux_system_cfg = False
record_linux_dmesg = False
record_linux_message = False
record_linux_cpuinfo = False
record_linux_system_sensors = False
record_linux_acpi_tables = False
check_linux_system_cfg = (False, 'NUL()')
check_linux_clock_type = (False, 'OR(tsc,)')
check_linux_special_pcie_device = (False, 'AND(devname=i210, speed=2.5 GT/s, width=x1)')

check_linux_syslog_error = (False, 'OR(Hardware Error, warp)')

check_bmc_mcerr = (False, 'NUL()')

check_bios_upi_link = (False, 'AND(CPU0 :LEP0(1:CPU1): LEP1(0: CPU1), CPU1 :LEP0(1:CPU0): LEP1(0: CPU0))')


[customized_check]
### this section is specified for user defined checkers (only used for dpmo cycling)
# option name should be format: check_sutos_[real_script_name.py|.sh|.bat|.ps1]
# all those scripts should be saved to sutos path:
# all those scripts should be marked as pass based on return 0
# all those scripts run standalone without any external parameter
check_linux_customized_script.py = False
check_linux_customized_script.sh = False
check_linux_customized_script.bat = False
check_linux_customized_script.ps1 = False

check_windows_customized_script.py = False
check_windows_customized_script.sh = False
check_windows_customized_script.bat = False
check_windows_customized_script.ps1 = False